# -*- coding: utf-8 -*-
"""Autompg_Deep_Leraning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uqgFDSF3pRYhNB5rXGalJ35Ec5pMre5m
"""

import keras
import tensorflow

from keras.models import Sequential  #Sequential--->Pipelining
from keras.layers import Dense   #Dense---> To Define Output Layer or It will Fully Connect Input Layer and Output Layer
from keras.optimizers import Adam  #Adam--->Optimizer---Optimal Answer

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

autompg=pd.read_csv(r"/content/auto-mpg.data",header=None,delim_whitespace=True)
autompg

autompg.columns=['mpg','cylinders','displacement','horsepower','weight','accelereation','model year','origin','car name']
autompg

autompg.isnull()

autompg.isnull().sum()

autompg.dtypes

autompg.columns

for i in autompg.columns:
    print(i,':','\n',autompg[i].unique(),'\n')

for i in autompg.columns:
    print(i,':',sum(autompg[i]=='?'))

autompg.describe(include='all')

autompg.horsepower.replace('?',150,inplace=True)

for i in autompg.columns:
    print(i,':',sum(autompg[i]=='?'))

autompg.dtypes

autompg.dtypes

autompg.horsepower = autompg.horsepower.astype('float64')

autompg.dtypes

autompg.columns

sns.scatterplot(x=autompg.origin,y=autompg.accelereation)
plt.show()

corr=autompg.corr()
corr

sns.heatmap(corr,annot=True,cmap="Reds")
plt.show()

ip=autompg[['cylinders', 'displacement', 'horsepower', 'weight','accelereation', 'model year', 'origin']]
op=autompg.mpg

from sklearn.model_selection import train_test_split
xtrain,xt,ytrain,yt=train_test_split(ip,op,test_size=0.2)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
xtrain=sc.fit_transform(xtrain)
xt=sc.fit_transform(xt)

model=Sequential()
#Input Layer
model.add(Dense(50,input_dim=7,activation='ELU'))

#Hidden Layer
model.add(Dense(45,activation='ELU'))
model.add(Dense(22,activation='ELU'))

#Output Layer
model.add(Dense(1,activation='ELU'))

#Compile
model.compile(Adam(learning_rate=0.01),loss='mae')

model.summary()

x=model.fit(xtrain,ytrain,epochs=200,validation_data=(xt,yt))

y_pred=model.predict(xt)
y_pred

from sklearn.metrics import r2_score
r2=r2_score(y_pred,yt)

print('r2',r2)

